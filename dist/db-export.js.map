{"version":3,"sources":["../src/db-export.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,mBAAQ,YAAR;;AAEA,iBAAQ,OAAR;;AAEA,IAAI,SAAS;AACX,SAAO,EAAP;CADE;;AAIJ,SAAS,QAAT,CAAkB,IAAlB,EAAwB,QAAxB,EAAkC;AAChC,MAAM,KAAK,IAAI,iBAAQ,QAAR,CAAiB,IAArB,CAAL,CAD0B;;AAGhC,KAAG,SAAH,CAAa,YAAM;AACjB,OAAG,QAAH,CAAY,mBAAZ,EAAiC,IAAjC,CAAsC,UAAS,OAAT,EAAkB;AACtD,UAAM,QAAQ,KAAK,KAAL,CAAW,QAAQ,KAAR,CAAnB,CADgD;AAEtD,UAAM,SAAS,KAAK,KAAL,CAAW,QAAQ,MAAR,CAApB;;;AAFgD,YAKtD,CAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,UAAC,GAAD,EAAS;AAClC,YAAM,QAAQ,MAAM,GAAN,CAAR,CAD4B;;AAGlC,eAAO,KAAP,CAAa,MAAM,EAAN,CAAb,GAAyB;AACvB,cAAI,MAAM,EAAN;AACJ,gBAAM,MAAM,IAAN;AACN,kBAAQ,EAAR;SAHF,CAHkC;OAAT,CAA3B;;;AALsD,YAgBtD,CAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAC,GAAD,EAAS;AACnC,YAAM,QAAQ,OAAO,GAAP,CAAR,CAD6B;;AAGnC,YAAI,OAAO,OAAO,KAAP,CAAa,MAAM,GAAN,CAApB,KAAmC,WAAnC,EAAgD;AAClD,iBADkD;SAApD;;AAIA,eAAO,KAAP,CAAa,MAAM,GAAN,CAAb,CAAwB,MAAxB,CAA+B,MAAM,EAAN,CAA/B,GAA2C;AACzC,cAAI,MAAM,EAAN;AACJ,gBAAM,MAAM,IAAN;AACN,gBAAM,MAAM,GAAN;AACN,gBAAM,MAAM,IAAN;AACN,kBAAQ,MAAM,IAAN,CAAW,GAAX,CAAe,UAAC,KAAD,EAAW;AAChC,mBAAO;AACL,oBAAM,MAAM,IAAN;aADR,CADgC;WAAX,CAAvB;SALF,CAPmC;OAAT,CAA5B,CAhBsD;;AAoCtD,eAAS,KAAT,EAAgB,MAAhB,EApCsD;KAAlB,CAAtC,CADiB;GAAN,CAAb,CAHgC;CAAlC;;kBA6Ce","file":"db-export.js","sourcesContent":["import sqlite3 from 'sqlite3';\nimport Promise from 'bluebird';\n\nPromise.promisifyAll(sqlite3);\n\nsqlite3.verbose();\n\nlet output = {\n  decks: {}\n};\n\nfunction dbExport(file, callback) {\n  const db = new sqlite3.Database(file);\n\n  db.serialize(() => {\n    db.getAsync('SELECT * FROM col').then(function(results) {\n      const decks = JSON.parse(results.decks);\n      const models = JSON.parse(results.models);\n\n      // Parse the decks\n      Object.keys(decks).forEach((key) => {\n        const value = decks[key];\n\n        output.decks[value.id] = {\n          id: value.id,\n          name: value.name,\n          models: {}\n        };\n      });\n\n      // Parse the models\n      Object.keys(models).forEach((key) => {\n        const value = models[key];\n\n        if (typeof output.decks[value.did] === \"undefined\") {\n          return;\n        }\n\n        output.decks[value.did].models[value.id] = {\n          id: value.id,\n          name: value.name,\n          deck: value.did,\n          tags: value.tags,\n          fields: value.flds.map((field) => {\n            return {\n              name: field.name,\n            };\n          })\n        };\n      });\n\n      callback(false, output);\n    });\n  });\n}\n\nexport default dbExport;\n"]}