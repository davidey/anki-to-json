{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAAA;;;;;;AAEA,iBAAQ,OAAR;;AAEA,IAAM,KAAK,IAAI,iBAAQ,QAAR,CAAiB,oBAArB,CAAL;;AAEN,IAAI,SAAS;AACX,SAAO,EAAP;CADE;;AAIJ,GAAG,SAAH,CAAa,YAAM;AACjB,KAAG,GAAH,CAAO,mBAAP,EAA4B,UAAS,GAAT,EAAc,OAAd,EAAuB;AACjD,QAAM,QAAQ,KAAK,KAAL,CAAW,QAAQ,KAAR,CAAnB,CAD2C;AAEjD,QAAM,SAAS,KAAK,KAAL,CAAW,QAAQ,MAAR,CAApB;;;AAF2C,UAKjD,CAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,UAAC,GAAD,EAAS;AAClC,UAAM,QAAQ,MAAM,GAAN,CAAR,CAD4B;;AAGlC,aAAO,KAAP,CAAa,MAAM,EAAN,CAAb,GAAyB;AACvB,YAAI,MAAM,EAAN;AACJ,cAAM,MAAM,IAAN;AACN,gBAAQ,EAAR;OAHF,CAHkC;KAAT,CAA3B;;;AALiD,UAgBjD,CAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAC,GAAD,EAAS;AACnC,UAAM,QAAQ,OAAO,GAAP,CAAR,CAD6B;;AAGnC,UAAI,OAAO,OAAO,KAAP,CAAa,MAAM,GAAN,CAApB,KAAmC,WAAnC,EAAgD;AAClD,eADkD;OAApD;;AAIA,aAAO,KAAP,CAAa,MAAM,GAAN,CAAb,CAAwB,MAAxB,CAA+B,MAAM,EAAN,CAA/B,GAA2C;AACzC,YAAI,MAAM,EAAN;AACJ,cAAM,MAAM,IAAN;AACN,cAAM,MAAM,GAAN;AACN,cAAM,MAAM,IAAN;AACN,gBAAQ,MAAM,IAAN,CAAW,GAAX,CAAe,UAAC,KAAD,EAAW;AAChC,iBAAO;AACL,kBAAM,MAAM,IAAN;WADR,CADgC;SAAX,CAAvB;OALF,CAPmC;KAAT,CAA5B,CAhBiD;;AAoCjD,YAAQ,GAAR,CAAY,KAAK,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ,EApCiD;GAAvB,CAA5B;;;;;;;;AADiB,CAAN,CAAb","file":"index.js","sourcesContent":["import sqlite3 from 'sqlite3';\n\nsqlite3.verbose();\n\nconst db = new sqlite3.Database('./collection.anki2');\n\nlet output = {\n  decks: {}\n};\n\ndb.serialize(() => {\n  db.get('SELECT * FROM col', function(err, results) {\n    const decks = JSON.parse(results.decks);\n    const models = JSON.parse(results.models);\n\n    // Parse the decks\n    Object.keys(decks).forEach((key) => {\n      const value = decks[key];\n\n      output.decks[value.id] = {\n        id: value.id,\n        name: value.name,\n        models: {}\n      };\n    });\n\n    // Parse the models\n    Object.keys(models).forEach((key) => {\n      const value = models[key];\n\n      if (typeof output.decks[value.did] === \"undefined\") {\n        return;\n      }\n\n      output.decks[value.did].models[value.id] = {\n        id: value.id,\n        name: value.name,\n        deck: value.did,\n        tags: value.tags,\n        fields: value.flds.map((field) => {\n          return {\n            name: field.name,\n          };\n        })\n      };\n    });\n\n    console.log(JSON.stringify(output, null, 2));\n  });\n\n  // db.get('SELECT * FROM col', function(err, results) {\n  //   const decks = JSON.parse(results.decks);\n  //   for (let deck of decks) {\n  //     console.log(deck);\n  //   }\n  // });\n});\n"]}